// ПЕРВОЕ ПРИЛОЖЕНИЕ!!!

'use strict';

// ЦИКЛЫ:
let num = 50;
while (num <= 55) { // пока условие выполняется, цикл повторяется
	console.log(num); // получил: 50 51 52 53 54 55
	num++; // так как 50 всегда меньше 55, то условие зациклится до бесконечности, поэтому вводим в цикл постфиксный инкремент num++ до 55
	console.log(num); // получил: 51 52 53 54 55 56
}

let num1 = 50;
do { // цикл повторяется,  пока условие выполняется, затем выходим из цикла
	console.log(num1); // получил: 50 51 52 53 54 55
	num1++;
	console.log(num1); // получил: 51 52 53 54 55 56
}
while (num1 <= 55);

// САМЫЙ РАСПРОСТРАНЕННЫЙ ЦИКЛ
for (let i = 1; i < 8; i++) { // цикл приращивает на 1 переменную до выполнения условия
	console.log(i);  // получил: 1 2 3 4 5 6 7
}

let num2 = 60;
for (let i = 1; i < 9; i++) {
	console.log(num2); // получил: 60 61 62 63 64 65 66 67
	num2++;
	console.log(num2); // получил: 61 62 63 64 65 66 67 68
}
// ВАЖНО ПОНИМАТЬ, ГДЕ БУДЕТ НАХОДИТСЯ ИНКРЕМЕНТ/ДЕКРЕМЕНТ ВНУТРИ ЦИКЛА, ДО ОБРАБАТЫВАЕМОЙ ПЕРЕМЕННОЙ ИЛИ ПОСЛЕ НЕЁ, ЭТО ПОВЛИЯЕТ НА РЕЗУЛЬТАТ ВЫЧИСЛЕНИЙ!!!

for (let i = 1; i < 50; i++) {
	if (i === 6) {
		break; // обрывает цикл с момента выполнения условия!!!
	} // цикл приращивает на 1 переменную до строгого равенства с 6 и обрывает его
	console.log(i);  // получил: 1 2 3 4 5
}

for (let i = 1; i < 10; i++) {
	if (i === 6) {
		continue; // цикл приращивает на 1 переменную до строгого равенства с 6 и обрывает его, продолжает его после 6 до выполнения условия!!!
	}
	console.log(i);  // получил: 1 2 3 4 5 7 8 9
}

// ВЛОЖЕННОСТЬ ЦИКЛОВ + МЕТКИ:
for (let i = 0; i < 3; i++) {
	console.log(i);
	for (let j = 0; j < 3; j++) { // во вложенных циклах обычно применяют буквы i, j, k и т.д. (негласный стандарт)
		console.log(j);
	}
} // получил: 
// 0 => i (внешний цикл)
// 0 => j (внутренний цикл)
// 1 => j (внутренний цикл)
// 2 => j (внутренний цикл)
// 1 => i (внешний цикл)
// 0 => j (внутренний цикл)
// 1 => j (внутренний цикл)
// 2 => j (внутренний цикл)
// 2 => i (внешний цикл)
// 0 => j (внутренний цикл)
// 1 => j (внутренний цикл)
// 2 => j (внутренний цикл)

// Задача сформировать треугольник их звездочек:

// *
// **
// ***
// ****
// *****
// ******

let result = '';
const length = 7;
for (let i = 1; i < length; i++) { // i = 1, запускается вложенный цикл, где j = 0, 0 < 1 => отрабатывает вложенный цикл один раз и появляется *
	for (let j = 0; j < i; j++) { // далее идет перенос строки, далее i = 2, запускается вложенный цикл, где j = 0, 0 < 2 => отрабатывает 
		result +='*'; // вложенный цикл дважды и появляется **, далее идет перенос строки, и так далее...
	}
	result +='\n'; // '\n' - это оператор переноса строки!!!
}
console.log(result); // задача решена!!!

first: for (let i = 0; i < 3; i++) { // 
	console.log(`First level: ${i}`);
	for (let j = 0; j < 3; j++) {
		console.log(`Second level: ${j}`);
		for (let k = 0; k < 5; k++) {
			if (k === 2) continue first; // в тот момент, когда наметится строгое равенство (k === 2), то самый внешний цикл начнем с новой итерации благодаря МЕТКЕ first и оператору continue
			console.log(`Third level: ${k}`);
		}
	}
}
// получил:
// First level: 0
// Second level: 0
// Third level: 0
// Third level: 1
// First level: 1
// Second level: 0
// Third level: 0
// Third level: 1
// First level: 2
// Second level: 0
// Third level: 0
// Third level: 1

first: for (let i = 0; i < 3; i++) { // 
	console.log(`First level: ${i}`);
	for (let j = 0; j < 3; j++) {
		console.log(`Second level: ${j}`);
		for (let k = 0; k < 5; k++) {
			if (k === 2) break first; // в тот момент, когда наметится строгое равенство (k === 2), то самый внешний цикл полностью останавливается благодаря МЕТКЕ first и оператору break
			console.log(`Third level: ${k}`);
		}
	}
}
// получил:
// First level: 0
// Second level: 0
// Third level: 0
// Third level: 1