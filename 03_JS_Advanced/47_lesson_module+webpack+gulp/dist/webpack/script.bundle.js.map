{"version":3,"file":"script.bundle.js","mappings":";;;;;;;;;;;;;;;;;AAAA;AACA;AACA,yBAAyB;AACzB,8BAA8B;AAC9B;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACO;AACP;AACA;AACa;AACb;AACO;AACP;AACA;AACA;AACe,oBAAoB;AACnC;AACA;;;;;;UC3BA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA,8CAA8C;;;;;WCA9C;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;ACNA;AACA;AACA,gCAAgC;AAChC;AACA,+CAA+C;AAC/C;AACA,4CAA4C;AAC5C;AACA,6BAA6B;AAC7B,+BAA+B;AAC/B,2BAA2B;AAC3B;AACA;AACA;AACA,WAAW,UAAU,2BAA2B,sBAAsB;AACtE,kBAAkB,KAAK,IAAI,KAAK,IAAI,UAAU,IAAI;AAClD;AACA,WAAW,cAAc,2BAA2B;AACpD,uBAAuB;AACvB;AACA;AAC2C;AAC3C,eAAe,kDAAQ,EAAE,IAAI,kDAAQ,EAAE,IAAI,kDAAQ,GAAG,kDAAQ,CAAC,IAAI;AACnE,oDAAU,KAAK;AACf;AACwC;AACxC,6DAAM,IAAI,gJ","sources":["webpack://food/./src/js/modules/hello.js","webpack://food/webpack/bootstrap","webpack://food/webpack/runtime/define property getters","webpack://food/webpack/runtime/hasOwnProperty shorthand","webpack://food/webpack/runtime/make namespace object","webpack://food/./src/js/script.js"],"sourcesContent":["/* eslint-disable linebreak-style */\r\n\r\n// function MyModule() { // создаем модуль, который будет отграничен в маленьком файлике с помощью функций конструкторов\r\n// \tthis.hello = function() { // через контекст вызова this создаем функцию hello\r\n// \t\tconsole.log('Hello!');\r\n// \t};\r\n// \tthis.goodbye = function() { // через контекст вызова this создаем функцию goodbye\r\n// \t\tconsole.log('Bye!');\r\n// \t};\r\n// \tthis.hye = function() {\r\n// \t\tconsole.log('HELLO WORLD!');\r\n// \t};\r\n// }\r\n// export default MyModule; // default - говорит, что по умолчанию из данного файлика будет экспортироваться именно эта функция\r\n\r\n// поименнованный синтаксис\r\nexport let one = 1;\r\n\r\nlet two = 2;\r\nexport {two};\r\n\r\nexport function sayHi() {\r\n\tconsole.log('Hi... Function!');\r\n}\r\n\r\nexport default function sayHi2() { // export default - дает преимущество прямого экспортирования и использования уже как самую отдельную функцию при этом на странице должен быть только один!!!\r\n\tconsole.log('Hi... NEW Function!');\r\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/* eslint-disable linebreak-style */\r\n\r\n// console.log('SCRIPT FILE:'); // получил: SCRIPT FILE:\r\n\r\n// import MyModule from './modules/hello.js';  // для импортирования функции myModule из /modules/hello.js, создаем переменную myModule с синтаксисом функции\r\n\r\n// const myModuleInstance = new MyModule(); // создаем экземпляр модуля для применения к нему различных методов =>\r\n\r\n// myModuleInstance.hello(); // получил: Hello!\r\n// myModuleInstance.goodbye(); // получил: Bye!\r\n// myModuleInstance.hye(); // получил: HELLO WORLD!\r\n\r\n// поименнованный синтаксис\r\n\r\n// import {one, two} from './modules/hello.js'; // фигурные скобки {} для поименнованного синтаксиса обязательны, так как экспортируется большой объект\r\n// console.log(`${one} + ${two} = ${one + two}`); // получил: 1 + 2 = 3\r\n\r\n// import {one as first} from './modules/hello.js'; // при импорте можно сразу переименовывать экспортируемые переменные\r\n// console.log(first); // получил: 1\r\n\r\n// другой вариант импортирования всех данных разом:\r\nimport * as data from './modules/hello.js';\r\nconsole.log(`${data.one} + ${data.two} = ${data.one + data.two}`); // получил: 1 + 2 = 3, так как data это объект, который включает в себя все экспортируемое из файла hello.js\r\ndata.sayHi();  // получил: Hi... Function!\r\n\r\nimport sayHi2 from './modules/hello.js';\r\nsayHi2(); // export default - дает преимущество прямого экспортирования и использования уже как самую отдельную функцию,  // получил:  Hi... NEW Function!"],"names":[],"sourceRoot":""}